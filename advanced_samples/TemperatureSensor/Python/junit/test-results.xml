<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="Crescent" name="pytest" skipped="0" tests="1" time="23.636" timestamp="2020-09-11T14:00:49.556221"><testcase classname="test.SampleTests" file="test.py" line="6" name="test_main" time="23.358"><failure message="AssertionError: Encountered Error: OMF message was unsuccessful, type. 400:&quot;One or more errors occurred. (Data store rejected 2 type deletes. Example exception: The type was not found.)&quot;">cls = &lt;class &apos;Python.test.SampleTests&apos;&gt;

    @classmethod
    def test_main(cls):
&gt;       main(True)

test.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

test = True

    def main(test=False):
        global omfVersion, userName, password, clientId, clientSecret, resourceBase, OcsOmfUrl, EdsOmfUrl, PiOmfUrl, VERIFY_SSL
        try:
            print(&apos;------------------------------------------------------------------&apos;)
            print(&apos; .d88888b.  888b     d888 8888888888        8888888b. Y88b   d88P &apos;)
            print(&apos;d88P&quot; &quot;Y88b 8888b   d8888 888               888   Y88b Y88b d88P  &apos;)
            print(&apos;888     888 88888b.d88888 888               888    888  Y88o88P   &apos;)
            print(&apos;888     888 888Y88888P888 8888888           888   d88P   Y888P    &apos;)
            print(&apos;888     888 888 Y888P 888 888               8888888P&quot;     888     &apos;)
            print(&apos;888     888 888  Y8P  888 888               888           888     &apos;)
            print(&apos;Y88b. .d88P 888   &quot;   888 888               888           888     &apos;)
            print(&apos; &quot;Y88888P&quot;  888       888 888      88888888 888           888     &apos;)
            print(&apos;------------------------------------------------------------------&apos;)
    
            # Sensor configuration
            useRandom = getConfig(&apos;Configurations&apos;, &apos;UseRandom&apos;)
            sensorUrl = getConfig(&apos;Configurations&apos;, &apos;SensorUrl&apos;)
            containerId = getConfig(&apos;Configurations&apos;, &apos;ContainerId&apos;)
    
            # Scanning configuration
            iterationCount = (int)(
                getConfig(&apos;Configurations&apos;, &apos;NumberOfIterations&apos;))
            delayBetweenRequests = (int)(
                getConfig(&apos;Configurations&apos;, &apos;DelayBetweenRequests&apos;))
    
            # Get OMF endpoint
            SendToOcs = (bool)(distutils.util.strtobool(
                getConfig(&apos;Configurations&apos;, &apos;SendToOcs&apos;)))
            if (SendToOcs):
                resourceBase = getConfig(&apos;Configurations&apos;, &apos;OcsUri&apos;)
                OcsTenantId = getConfig(&apos;Configurations&apos;, &apos;OcsTenantId&apos;)
                OcsNamespaceId = getConfig(&apos;Configurations&apos;, &apos;OcsNamespaceId&apos;)
                clientId = getConfig(&apos;Configurations&apos;, &apos;OcsClientId&apos;)
                clientSecret = getConfig(&apos;Configurations&apos;, &apos;OcsClientSecret&apos;)
                OcsOmfUrl = resourceBase + &apos;/api/v1/tenants/&apos; + OcsTenantId + \
                    &apos;/namespaces/&apos; + OcsNamespaceId + &apos;/omf&apos;
    
            SendToEds = (bool)(distutils.util.strtobool(
                getConfig(&apos;Configurations&apos;, &apos;SendToEds&apos;)))
            if (SendToEds):
                EdsPort = getConfig(&apos;Configurations&apos;, &apos;EdsPort&apos;)
                EdsOmfUrl = &apos;http://localhost:&apos; + EdsPort + \
                    &apos;/api/v1/tenants/default/namespaces/default/omf&apos;
    
            SendToPi = (bool)(distutils.util.strtobool(
                getConfig(&apos;Configurations&apos;, &apos;SendToPi&apos;)))
            if (SendToPi):
                PiWebApiUrl = getConfig(&apos;Configurations&apos;, &apos;PiWebApiUrl&apos;)
                userName = getConfig(&apos;Configurations&apos;, &apos;UserName&apos;)
                password = getConfig(&apos;Configurations&apos;, &apos;Password&apos;)
                VERIFY_SSL = (bool)(distutils.util.strtobool(
                    getConfig(&apos;Configurations&apos;, &apos;VerifySSL&apos;)))
                if not VERIFY_SSL:
                    print(&apos;You are not verifying the certificate of the PI Web API endpoint. This is insecure and should not be done in production, please properly handle your certificates. &apos;)
                PiOmfUrl = PiWebApiUrl + &apos;/omf&apos;
    
            oneTimeSendCreates(containerId)
    
            count = 0
            time.sleep(1)
            while count == 0 or ((not test) and count &lt; iterationCount):
                # Use getSensorValue() method when HW sensor is available or getRandomValue() method to
                # generate random value for demonstration purposes.
                if (useRandom):
                    measurement = getRandomValue()
                else:
                    measurement = getSensorValue(sensorUrl)
    
                if(measurement == ERROR_STRING):
                    print(&apos;Unable to get data from the sensor...&apos;)
                else:
                    value = int(measurement)/10
                    print(&quot;Sending value: &quot;, value)
                    message = createDataValue(containerId, value)
                    sendOmfMessageToEndpoint(&apos;data&apos;, message)
    
                time.sleep(delayBetweenRequests)
                count = count + 1
    
            if (test):
                oneTimeSendDeletes(containerId)
    
            print(&apos;Complete!&apos;)
            return True
        except Exception as ex:
            print()
            msg = &quot;Encountered Error: {error}&quot;.format(error=ex)
            print(msg)
            print()
            traceback.print_exc()
            print()
&gt;           assert False, msg
E           AssertionError: Encountered Error: OMF message was unsuccessful, type. 400:&quot;One or more errors occurred. (Data store rejected 2 type deletes. Example exception: The type was not found.)&quot;

program.py:500: AssertionError</failure></testcase></testsuite></testsuites>