variables:
- group: LocalServer
- name: projpath
  value: /basic_samples/OMF_API/CSharp/OMF_API/
- name: CredFile
  value: appsettings.json
- name: CredFileLibrary
  value: prod_omf_appsettings.json
- name: testpath
  value: /basic_samples/OMF_API/CSharp/OMF_APITests
- name: covFolder
  value: cov-int
- name: covPath
  value: C:\Program Files\Coverity\Coverity Static Analysis\bin\
- name: covAuthPath
  value: C:\Users\dendres\Documents\coverity\keyfile.ky
- name: job
  value: OMF_APIDotNet

jobs:      
- job: OMF_APIDotNet_Cov

  pool:
    name: 00-OSIManaged-Test
    demands: USERNAME -equals $(LocalServer)

  steps:
  - script: 'mkdir $(covFolder)'
    workingDirectory: '$(Build.SourcesDirectory)$(projpath)'
    displayName: 'make dir '
    continueOnError: true

  - script: '"$(covPath)cov-build" --dir . --no-command --fs-capture-search ../ '
    workingDirectory: '$(Build.SourcesDirectory)$(projpath)$(covFolder)'
    displayName: 'build '

  - script: '"$(covPath)cov-analyze" --dir . '
    workingDirectory: '$(Build.SourcesDirectory)$(projpath)$(covFolder)'
    displayName: 'analyze '

  - script: '"$(covPath)cov-commit-defects" --stream "Engineering Incubation - $(job)" --host $(coverity_server) --https-port 8443 --auth-key-file "$(covAuthPath)" --dir . '
    workingDirectory: '$(Build.SourcesDirectory)/basic_samples/OMF_API/Python3/cov-int'
    displayName: 'upload '

- job: OMF_APIDotNet_BD

  pool:
    name: Hosted VS2017
    demands:
      - maven
      - npm

  steps:
   - task: black-duck-software.detect-for-tfs.hub.detect.task.BlackDuckDetect@1
     displayName: 'Run Black Duck Detect for $(job)'
     inputs:
        BlackDuckHubService: 'Black Duck'
        DetectArguments: |
           --detect.project.name="$(job)" 
           --detect.project.version.name="latest" 
           --detect.source.path="$(build.sourcesDirectory)$(projpath)"
           --detect.code.location.name="code_location_$(job)_latest_$(job)"
           --detect.bom.aggregate.name="bom_$(job)_latest_$(job)"


- job: OMF_APIDotNet_BS

  pool:
    name: Hosted VS2017

  steps:
  
    - script: |
        dotnet restore
        dotnet msbuild -p:HIGHENTROPYVA=true
      workingDirectory: $(Build.SourcesDirectory)$(projpath)
      displayName: 'Build'

    - task: ms-codeanalysis.vss-microsoft-security-code-analysis.build-task-binskim.BinSkim@3
      displayName: 'Run BinSkim '
      inputs:
        AnalyzeTarget: '$(Build.SourcesDirectory)\*.dll;$(Build.SourcesDirectory)\*.exe'
